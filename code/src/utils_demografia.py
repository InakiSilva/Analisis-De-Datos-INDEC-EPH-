import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from constants import AGLOMERADO_STR  

#-------------
#Funcoin para el ejercicio 1.3.1
#----------------


def distribucion_por_edad_y_sexo(df):
    """ El usuario selecciona un a√±o y un trimestre.
        Se muestra un gr√°fico de barras dobles con la distribuci√≥n de la poblaci√≥n
        por grupos de edad de 10 a√±os y por sexo.
    """

    st.header("Distribuci√≥n por grupos de edad y sexo")
    st.markdown("Se muestra la distribuci√≥n de la poblacion agrupada por rangos de edad y por g√©nero")

    #  lectura del a√±o 
    anos_disponibles = sorted(df["ANO4"].unique())
    anio = st.selectbox("Seleccione el a√±o:", anos_disponibles, key="anio_2")

    #  lectura del trimestre (filtrado por a√±o seleccionado) 
    trimestres_disponibles = sorted(df.loc[df["ANO4"] == anio, "TRIMESTRE"].unique())
    trimestre = st.selectbox("Seleccione el trimestre:", trimestres_disponibles, key="trimestre_2")

    # filtro el dataframe por a√±o y trimestre 
    filtrado = df[(df["ANO4"] == anio) & (df["TRIMESTRE"] == trimestre)]

    if filtrado.empty:
        st.warning("No hay datos disponibles para el a√±o y trimestre seleccionados.")
        return

    #  agrupo edades en intervalos de 10 a√±os 
    bins = range(0, 101, 10)  # Va en series de 0-9, 10-19, .. , 90-99
    labels = [f"{i}-{i+9}" for i in bins[:-1]]
    filtrado["grupo_edad"] = pd.cut(filtrado["CH06"], bins=bins, labels=labels, right=False)

    #  mapeo sexo a texto legible 
    filtrado["sexo"] = filtrado["CH04"].map({1: "Var√≥n", 2: "Mujer"})

    #  agrupo por grupo de edad y sexo 
    conteo = (
        filtrado
        .groupby(["grupo_edad", "sexo"])["PONDERA"]
        .sum()
        .reset_index(name="Cantidad")
    )

    #  muestro gr√°fico de barras dobles 
    st.markdown("### üìä Distribuci√≥n poblacional por edad y sexo")
    plt.figure(figsize=(10, 6))
    sns.barplot(data=conteo, x="grupo_edad", y="Cantidad", hue="sexo")
    plt.title(f"Poblaci√≥n por grupo de edad y sexo ‚Äì {anio} T{trimestre}")
    plt.xlabel("Grupo de edad (a√±os)")
    plt.ylabel("Cantidad de personas")
    plt.xticks(rotation=45)
    plt.tight_layout()
    st.pyplot(plt.gcf())


# --------------------------------------------------------------------------------------
#Funcion para ejercicio 1.3.2



def edad_promedio_por_aglomerado(df):
    """
    Calcula y muestra la edad promedio por aglomerado
    para el √∫ltimo a√±o y trimestre disponibles en el DataFrame.
    """

    # encabezado
    st.header("Edad promedio por aglomerado")
    st.markdown("Se permite visualizar la edad promedio de personas por aglomerado para el √∫ltimo semestre disponible con un formato a elecci√≥n del usuario")

    # deteccion del ultimo trimestre y ultimo a√±o
    ultimo_anio  = df["ANO4"].max()
    ultimo_trim  = df[df["ANO4"] == ultimo_anio]["TRIMESTRE"].max()
    st.info(f" √öltimo per√≠odo disponible: {ultimo_anio} - Trimestre {ultimo_trim}")

    # filtrado del DataFrame para ese a√±o‚Äëtrimestre
    filtrado = df[(df["ANO4"] == ultimo_anio) & (df["TRIMESTRE"] == ultimo_trim)]
    if filtrado.empty:
        st.warning("No hay datos para el √∫ltimo per√≠odo disponible.")
        return

    # calculo de la edad promedio por aglomerado

    edad_prom = (
        filtrado
        .groupby("AGLOMERADO")
        .apply(lambda g: (g["CH06"] * g["PONDERA"]).sum() / g["PONDERA"].sum())
        .reset_index()
        .rename(columns={0: "Edad promedio"})
    )

    # mapeo el c√≥digo de aglomerado a su nombre legible
    edad_prom["Aglomerado"] = edad_prom["AGLOMERADO"].map(AGLOMERADO_STR)
    # Ordenar de mayor a menor edad promedio
    edad_prom = edad_prom.sort_values("Edad promedio", ascending=False)

    # 4)  visualizaci√≥n de tabla redondeada a 2 decimales
    st.markdown("### üìã Edad promedio por aglomerado")

    st.markdown ("¬øC√≥mo desea visualizar los datos?")

    # selector de grafico para el usuario
    vertical = st.toggle("Gr√°fico de barras vertical")
    horizontal = st.toggle("Gr√°fico de barras horizontal")
    tabla = st.toggle("Tabla")

    # grafico de barras VERTICAL
    if vertical:
        st.markdown("### üìä Gr√°fico de barras (vertical)")

        # Ancho din√°mico: 0.5 pulgadas por barra 
        ancho = max(14, len(edad_prom) * 0.5)
        fig, ax = plt.subplots(figsize=(ancho, 6))

        sns.barplot(
            data=edad_prom,
            x="Aglomerado", y="Edad promedio",
            palette="mako", ax=ax
        )

        # ajustes visuales
        ax.set_xlabel("Aglomerado", fontsize=11)
        ax.set_ylabel("Edad promedio", fontsize=11)
        ax.set_xticklabels(ax.get_xticklabels(),
        rotation=70, ha='right', fontsize=9)  # evita solapamiento
        ax.tick_params(axis='y', labelsize=10)

        plt.tight_layout()
        st.pyplot(fig)

    # grafico de barras HORIZONTAL

    if horizontal:
        st.markdown("### üìä Gr√°fico de barras (horizontal)")

        # Alto din√°mico: 0.6 pulgadas por barra (m√≠nimo 6)
        alto = max(6, len(edad_prom) * 0.6)
        fig, ax = plt.subplots(figsize=(12, alto))

        sns.barplot(
            data=edad_prom,
            y="Aglomerado", x="Edad promedio",
            palette="mako", ax=ax
        )

        # Ajustes est√©ticos
        ax.set_xlabel("Edad promedio", fontsize=12)
        ax.set_ylabel("")
        ax.tick_params(axis='y', labelsize=10)
        ax.tick_params(axis='x', labelsize=11)

        plt.tight_layout()
        st.pyplot(fig)
    
    if tabla:
        tabla = edad_prom[["Aglomerado", "Edad promedio"]].copy()
        tabla["Edad promedio"] = tabla["Edad promedio"].round(2)
        st.dataframe(tabla, use_container_width=True, hide_index=True)

#----------------------------------------------------------------------------------------
#Funcion para ejercicio 1.3.3

def evolucion_dependencia_demografica(df):
    """
    Muestra la evoluci√≥n de la dependencia demogr√°fica para un aglomerado seleccionado.
    """
    st.header("Evoluci√≥n de la dependencia demogr√°fica")
    st.markdown("Se representa la evoluci√≥n de la dependencia demogr√°fica en los semestres disponibles del aglomerado seleccionado")

    # mapeo aglomerados por nombre
    df["Aglomerado_nombre"] = df["AGLOMERADO"].map(AGLOMERADO_STR)

    aglomerado_seleccionado = st.selectbox("Seleccione un aglomerado:", df["Aglomerado_nombre"].dropna().unique(), key="select_aglo_dep")

    #  filtrado de aglomerado 
    aglo_cod = {v: k for k, v in AGLOMERADO_STR.items()}[aglomerado_seleccionado]
    df_aglo = df[df["AGLOMERADO"] == aglo_cod].copy()

    #evaluo posible error por falta de dfatos
    if df_aglo.empty:
        st.warning("No hay datos para este aglomerado.")
        return

    #  clasificacion por edades (EDAD en columna--> CHO6)
    df_aglo["grupo_etario"] = pd.cut(
        df_aglo["CH06"],
        bins=[0, 14, 64, float('inf')],
        labels=["0-14", "15-64", "65+"],
        right=True
    )

    # Agrupar por a√±o-trimestre
    evolucion = (
        df_aglo
        .groupby(["ANO4", "TRIMESTRE", "grupo_etario"])
        .size()
        .unstack(fill_value=0)
        .reset_index()
    )

    
    
    # Calcular dependencia
    poblacion_dependiente=evolucion["0-14"] + evolucion["65+"]
    
    evolucion["Dependencia (%)"] = (poblacion_dependiente / evolucion["15-64"]) * 100
    evolucion["Periodo"] = evolucion["ANO4"].astype(str) + " - T" + evolucion["TRIMESTRE"].astype(str)

    # mostrar tabla con la evolucion de la dependencia 
    st.markdown("### üìã Tabla de evoluci√≥n")
    st.dataframe(evolucion[["Periodo", "Dependencia (%)"]], use_container_width=True)

    # visualizaci√≥n de grafico. se utiliza grafico de lineas 
    st.markdown("### üìà Evoluci√≥n temporal de la dependencia demogr√°fica")
    fig, ax = plt.subplots(figsize=(12, 4))
    sns.lineplot(data=evolucion, x="Periodo", y="Dependencia (%)", marker="o", ax=ax)
    ax.set_title(f"Dependencia demogr√°fica en {aglomerado_seleccionado}")
    ax.set_ylabel("Dependencia (%)")
    ax.set_xlabel("Per√≠odo")
    plt.xticks(rotation=45)
    plt.tight_layout()
    st.pyplot(fig)



# --------------------------------------------------------------------------------------
#Funcion para ejercicio 1.3.4


def media_mediana_edad(df):
    """
    Permite seleccionar a√±o y trimestre y muestra
    la media y mediana de la edad de la poblaci√≥n.
    """

    st.header("Media y mediana de la edad de la poblaci√≥n")
    st.markdown("Se informa la media y mediana de la edad de la poblaci√≥n por cada a√±o y trimestre")

    # usuario selecciona a√±o y trimestre
    anios = sorted(df["ANO4"].unique())
    anio = st.selectbox("Seleccione el a√±o:", anios, index=len(anios)-1, key="anio_1")

    trimestres = sorted(df.loc[df["ANO4"] == anio, "TRIMESTRE"].unique())
    trimestre = st.selectbox("Seleccione el trimestre:", trimestres, key="trimestre_1")

    # filtro dataframe
    subset = df[(df["ANO4"] == anio) & (df["TRIMESTRE"] == trimestre)]

    if subset.empty:
        st.warning("No hay datos para el per√≠odo seleccionado.")
        return

    # calculo media y mediana
    media   = subset["CH06"].mean()
    mediana = subset["CH06"].median()

    #  visualizacion de resultados
    col1, col2 = st.columns(2)
    col1.metric("Edad media",   f"{media:,.2f} a√±os")
    col2.metric("Edad mediana", f"{mediana:,.2f} a√±os")
